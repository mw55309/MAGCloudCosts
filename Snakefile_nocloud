shell.executable("/bin/bash")
shell.prefix("source $HOME/.bashrc; ")

IDS,  = glob_wildcards("runs/{id}.txt")
IDS2, = glob_wildcards("runs/{id}.txt")

######################################################
#
# 
# rule "all" is the default rule that Snakemake runs
# this rule basically pulls data through the entire
# pipeline by specifying the final outputs of the
# pipeline as input. The rule does nothing
#
#
######################################################

rule all:
	input: expand("checkm/{sample}.checkm.txt", sample=IDS)


######################################################
#
#
# staging rules - these are designed to run each stage
# of the pipleine one after the other
#
#
######################################################

rule run_cutadapt:
	input: expand("trimmed/{sample}_1.t.fastq.gz", sample=IDS)

rule run_megahit:
	input: expand("megahit/{sample}/final.contigs.fa", sample=IDS)

rule run_bwa_index:
	input: expand("bwa_indices/{sample}.fa.ann", sample=IDS)

rule run_bwa_mem:
	input: expand("bam/{sample}.{sample2}.bam.flagstat", sample=IDS, sample2=IDS2)

rule run_coverage:
	input: expand("coverage/{sample}.txt", sample=IDS)

rule run_metabat2:
	input: expand("metabat2/{sample}/{sample}.unbinned.fa", sample=IDS)

rule run_checkm:
	input: expand("checkm/{sample}.checkm.txt", sample=IDS)
		
######################################################
#
#
# The actual rules
#
#
######################################################

rule cutadapt:
	input: "runs/{id}.txt"

	output:
		R1="trimmed/{id}_1.t.fastq.gz",
		R2="trimmed/{id}_2.t.fastq.gz"
	params:
		id="{id}"
	conda: "envs/cutadapt.yaml"
	threads: 4
	shell: "curl https://raw.githubusercontent.com/WatsonLab/GoogleMAGs/master/scripts/ftp_n_trimm.sh | bash -s {params.id} {output.R1} {output.R2}"




rule megahit:
	input:
		R1="trimmed/{id}_1.t.fastq.gz",
		R2="trimmed/{id}_2.t.fastq.gz"
	params:
		di="megahit/{id}"
	output: 
#		di="megahit/{id}/",
		fa="megahit/{id}/final.contigs.fa"
	conda: "envs/megahit.yaml"
	threads: 8
	shell: "mkdir -p {params.di} && megahit --continue --k-list 27,47,67,87 --kmin-1pass -m 0.95 --min-contig-len 1000 -t {threads} -1 {input.R1} -2 {input.R2} -o {params.di}"


rule bwa_index:
	input:  "megahit/{id}/final.contigs.fa"
	output: 
		ann="bwa_indices/{id}.fa.ann",
		pac="bwa_indices/{id}.fa.pac",
		amb="bwa_indices/{id}.fa.amb",
		bwt="bwa_indices/{id}.fa.bwt",
		sa ="bwa_indices/{id}.fa.sa"
	params:
		idx="bwa_indices/{id}.fa"
	conda: "envs/bwa.yaml"
	threads: 8
	shell:
		'''
		bwa index -p {params.idx} {input}
		'''

rule bwa_mem:
	input:
		R1="trimmed/{id}_1.t.fastq.gz",
		R2="trimmed/{id}_2.t.fastq.gz",
		ann="bwa_indices/{id2}.fa.ann",
		pac="bwa_indices/{id2}.fa.pac",
		amb="bwa_indices/{id2}.fa.amb",
		bwt="bwa_indices/{id2}.fa.bwt",
		sa ="bwa_indices/{id2}.fa.sa"
	output: 
		bam="bam/{id}.{id2}.bam",
		bai="bam/{id}.{id2}.bam.bai",
		fla="bam/{id}.{id2}.bam.flagstat"
	params:
		idx="bwa_indices/{id2}.fa"
	conda: "envs/bwa.yaml"
	threads: 8
	shell: 
		'''
		bwa mem -t 8 {params.idx} {input.R1} {input.R2} | samtools sort -@8 -m 500M -o {output.bam} -
		samtools index {output.bam}

		samtools flagstat {output.bam} > {output.fla}
		'''
	
rule coverage:
	input:
		bam=expand("bam/{sample}.{{each}}.bam", sample=IDS)
	output: 
		cov="coverage/{each}.txt"
	conda: "envs/metabat2.yaml"
	shell:
		'''
		jgi_summarize_bam_contig_depths --outputDepth {output.cov} {input.bam}
		'''

rule metabat2:
	input:
		asm="megahit/{id}/final.contigs.fa",
		cov="coverage/{id}.txt"
	output:
		unb="metabat2/{id}/{id}.unbinned.fa",
		dir="metabat2/{id}/"
	params:
		out="metabat2/{id}/{id}"
	threads: 8
	conda: "envs/metabat2.yaml"
	shell:
		'''
		metabat2 -t {threads} -i {input.asm} -a {input.cov} --unbinned -o {params.out}
		'''

rule checkm_data:
	output: "checkm_data"
	shell:
		'''
		mkdir -p {output}
		cd {output}
		wget https://data.ace.uq.edu.au/public/CheckM_databases/checkm_data_2015_01_16.tar.gz
		gunzip < checkm_data_2015_01_16.tar.gz | tar xvf -
		cd ..
		'''

rule checkm:
	input:
		dir="metabat2/{id}/",
		cin="checkm_data"
	output: "checkm/{id}.checkm.txt"
	params:
		dir="checkm/{id}"
	threads: 8
	conda: "envs/checkm.yaml"
	shell: 
		'''
		echo {input.cin} | checkm data setRoot {input.cin} 
		checkm lineage_wf --tab_table -f {output} --reduced_tree -t {threads} -x fa {input.dir} {params.dir}
		'''
